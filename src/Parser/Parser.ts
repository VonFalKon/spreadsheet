import {
  RULES,

  WHITE_SPACE_RULE_INDEX,
  DOUBLE_QUOTES_RULE_INDEX,
  SINGLE_QUOTES_RULE_INDEX,
  FORMULA_NAME_RULE_INDEX,
  DATE_RULE_INDEX,
  TIME_RULE_INDEX,
  $_A1_CELL_RULE_INDEX,
  A1_CELL_RULE_INDEX,
  FORMULA_NAME_SIMPLE_RULE_INDEX,
  VARIABLE_RULE_INDEX,
  SIMPLE_VARIABLE_RILE_INDEX,
  INTEGER_RULE_INDEX,
  OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX,
  DOLLAR_SIGN_RULE_INDEX,
  AMPERSAND_SIGN_RULE_INDEX,
  SINGLE_WHITESPACE_RULE_INDEX,
  PERIOD_RULE_INDEX,
  COLON_RULE_INDEX,
  SEMI_COLON_RULE_INDEX,
  COMMA_RULE_INDEX,
  ASTERISK_RULE_INDEX,
  FORWARD_SLASH_RULE_INDEX,
  MINUS_SIGN_RULE_INDEX,
  PLUS_SIGN_RULE_INDEX,
  CARET_SIGN_RULE_INDEX,
  OPEN_PAREN_RULE_INDEX,
  CLOSE_PAREN_RULE_INDEX,
  GREATER_THAN_SIGN_RULE_INDEX,
  LESS_THAN_SIGN_RULE_INDEX,
  NOT_RULE_INDEX,
  OPEN_DOUBLE_QUOTE_INDEX,
  OPEN_SINGLE_QUITE_INDEX,
  EXCLAMATION_POINT_RULE_INDEX,
  EQUALS_SIGN_RULE_INDEX,
  PERCENT_SIGN_RULE_INDEX,
  HASH_SIGN_RULE_INDEX,
  END_OF_STRING_RULE_INDEX,
  INDEX0,
  INDEX1,
  INDEX2,
  INDEX3,
  INDEX4,
  INDEX5,
  INDEX6,
  INDEX7,
  INDEX8,
  INDEX9,
  INDEX10,
  INDEX11,
  INDEX12,
  INDEX13,
  INDEX14,
  INDEX15,
  INDEX16,
  INDEX17,
  INDEX18,
  INDEX19,
  INDEX20,
  INDEX21,
  INDEX22,
  INDEX23,
  INDEX24,
  INDEX25,
  INDEX26,
  INDEX27,
  INDEX28,
  INDEX29,
  INDEX30,
  INDEX31,
  INDEX32,
  INDEX33,
  INDEX34,
  INDEX35,
  INDEX36
} from "./Rules";
import {
  ObjectFromPairs
} from "../Utilities/ObjectFromPairs";


const enum Actions {
  SHIFT = 1,
  REDUCE,
  ACCEPT
}

/* parser generated by jison 0.4.15 */
/*
 Returns a Parser object of the following structure:

 Parser: {
 yy: {}
 }

 Parser.prototype: {
 yy: {},
 trace: function(),
 symbols_: {associative list: name ==> number},
 terminals_: {associative list: number ==> name},
 productions_: [...],
 performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
 table: [...],
 defaultActions: {...},
 parseError: function(str, hash),
 parse: function(input),

 lexer: {
 EOF: 1,
 parseError: function(str, hash),
 setInput: function(input),
 input: function(),
 unput: function(str),
 more: function(),
 less: function(n),
 pastInput: function(),
 upcomingInput: function(),
 showPosition: function(),
 test_match: function(regex_match_array, rule_index),
 next: function(),
 lex: function(),
 begin: function(condition),
 popState: function(),
 _currentRules: function(),
 topState: function(),
 pushState: function(condition),

 options: {
 ranges: boolean           (optional: true ==> token location info will include a .range[] member)
 flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
 backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
 },

 performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 rules: [...],
 conditions: {associative list: name ==> set},
 }
 }


 token location info (@$, _$, etc.): {
 first_line: n,
 last_line: n,
 first_column: n,
 last_column: n,
 range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
 }


 the parseError function receives a 'hash' object with these members for lexer and parser errors: {
 text:        (matched text)
 token:       (the produced terminal token, if any)
 line:        (yylineno)
 }
 while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
 loc:         (yylloc)
 expected:    (string describing the set of expected tokens)
 recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
 }
 */
let Parser = (function () {
  const extendRules = function (k, v, obj?, l?) {
    for (obj = obj || {}, l = k.length; l--; obj[k[l]] = v) {
    }
    return obj;
  };
  const $V0 = [INDEX1, INDEX4];
  const $V1 = [INDEX1, INDEX5];
  const $V2 = [INDEX1, INDEX7];
  const $V3 = [INDEX1, INDEX10];
  const $V4 = [INDEX1, INDEX8];
  const $V5 = [INDEX1, INDEX9];
  const $V6 = [INDEX1, INDEX11];
  const $V7 = [INDEX1, INDEX16];
  const $V8 = [INDEX1, INDEX17];
  const $V9 = [INDEX1, INDEX14];
  const $Va = [INDEX1, INDEX15];
  const $Vb = [INDEX1, INDEX18];
  const $Vc = [INDEX1, INDEX20];
  const $Vd = [INDEX1, INDEX21];
  const $Ve = [INDEX1, INDEX22];
  const $Vf = [INDEX1, INDEX23];
  const $Vg = [INDEX1, INDEX24];
  const $Vh = [INDEX1, INDEX25];
  const $Vi = [INDEX1, INDEX26];
  const $Vj = [INDEX1, INDEX27];
  const $Vk = [INDEX1, INDEX28];
  const $Vl = [INDEX1, INDEX29];
  const $Vm = [INDEX5, INDEX11, INDEX12, INDEX13, INDEX15, INDEX16, INDEX17, INDEX18, INDEX19, INDEX20, INDEX21, INDEX22, INDEX30, INDEX31];
  const $Vn = [INDEX5, INDEX11, INDEX12, INDEX13, INDEX15, INDEX16, INDEX17, INDEX18, INDEX19, INDEX20, INDEX21, INDEX22, INDEX30, INDEX31, INDEX33];
  const $Vo = [INDEX1, 38];
  const $Vp = [INDEX5, INDEX11, INDEX12, INDEX13, INDEX15, INDEX16, INDEX17, INDEX18, INDEX19, INDEX20, INDEX21, INDEX22, INDEX30, INDEX31, INDEX35, 38];
  const $Vq = [INDEX5, INDEX12, INDEX13, INDEX15, INDEX16, INDEX17, INDEX18, INDEX19, INDEX30, INDEX31];
  const $Vr = [INDEX5, INDEX12, INDEX15, INDEX16, INDEX17, INDEX18, INDEX30, INDEX31];
  const $Vs = [INDEX5, INDEX12, INDEX13, INDEX15, INDEX16, INDEX17, INDEX18, INDEX19, INDEX20, INDEX21, INDEX30, INDEX31];
  const $Vt = [INDEX15, INDEX30, INDEX31];
  const $Vu = [INDEX5, INDEX11, INDEX12, INDEX13, INDEX15, INDEX16, INDEX17, INDEX18, INDEX19, INDEX20, INDEX21, INDEX22, INDEX30, INDEX31, INDEX32, INDEX36];
  let parser = {
    lexer: undefined,
    Parser: undefined,
    trace: function trace() {
    },
    yy: {},
    symbols_: {
      "error": 2,
      "expressions": 3,
      "expression": 4,
      "EOF": 5,
      "variableSequence": 6,
      "TIME_AMPM": 7,
      "TIME_24": 8,
      "number": 9,
      "STRING": 10,
      "&": 11,
      "=": 12,
      "+": 13,
      "(": 14,
      ")": 15,
      "<": 16,
      ">": 17,
      "NOT": 18,
      "-": 19,
      "*": 20,
      "/": 21,
      "^": 22,
      "FUNCTION": 23,
      "expseq": 24,
      "cell": 25,
      "FIXEDCELL": 26,
      ":": 27,
      "CELL": 28,
      "ARRAY": 29,
      ";": 30,
      ",": 31,
      "VARIABLE": 32,
      "DECIMAL": 33,
      "NUMBER": 34,
      "%": 35,
      "#": 36,
      "!": 37,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      5: "EOF",
      7: "TIME_AMPM",
      8: "TIME_24",
      10: "STRING",
      11: "&",
      12: "=",
      13: "+",
      14: "(",
      15: ")",
      16: "<",
      17: ">",
      18: "NOT",
      19: "-",
      20: "*",
      21: "/",
      22: "^",
      23: "FUNCTION",
      26: "FIXEDCELL",
      27: ":",
      28: "CELL",
      29: "ARRAY",
      30: ";",
      31: ",",
      32: "VARIABLE",
      33: "DECIMAL",
      34: "NUMBER",
      35: "%",
      36: "#",
      37: "!"
    },
    productions_: [
      0,
      [3, 2],
      [4, 1],
      [4, 1],
      [4, 1],
      [4, 1],
      [4, 1],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 4],
      [4, 4],
      [4, 4],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 2],
      [4, 2],
      [4, 3],
      [4, 4],
      [4, 1],
      [4, 1],
      [4, 2],
      [25, 1],
      [25, 3],
      [25, 1],
      [25, 3],
      [24, 1],
      [24, 1],
      [24, 3],
      [24, 3],
      [6, 1],
      [6, 3],
      [9, 1],
      [9, 3],
      [9, 2],
      [2, 3],
      [2, 4]
    ],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
      /* this == yyval */

      let $0 = $$.length - 1;
      switch (yystate) {
        case 1:
          return $$[$0 - 1];
        case 2:
          this.$ = yy.handler.helper.callVariable.call(this, $$[$0]);
          break;
        case 3:
          this.$ = yy.handler.time.call(yy.obj, $$[$0], true);
          break;
        case 4:
          this.$ = yy.handler.time.call(yy.obj, $$[$0]);
          break;
        case 5:
          this.$ = yy.handler.helper.number($$[$0]);
          break;
        case 6:
          this.$ = yy.handler.helper.string($$[$0]);
          break;
        case 7:
          this.$ = yy.handler.helper.specialMatch('&', $$[$0 - 2], $$[$0]);
          break;
        case 8:
          this.$ = yy.handler.helper.logicMatch('=', $$[$0 - 2], $$[$0]);
          break;
        case 9:
          this.$ = yy.handler.helper.mathMatch('+', $$[$0 - 2], $$[$0]);
          break;
        case 10:
          this.$ = yy.handler.helper.number($$[$0 - 1]);
          break;
        case 11:
          this.$ = yy.handler.helper.logicMatch('<=', $$[$0 - 3], $$[$0]);
          break;
        case 12:
          this.$ = yy.handler.helper.logicMatch('>=', $$[$0 - 3], $$[$0]);
          break;
        case 13:
          this.$ = yy.handler.helper.logicMatch('<>', $$[$0 - 3], $$[$0]);
          break;
        case 14:
          this.$ = yy.handler.helper.logicMatch('NOT', $$[$0 - 2], $$[$0]);
          break;
        case 15:
          this.$ = yy.handler.helper.logicMatch('>', $$[$0 - 2], $$[$0]);
          break;
        case 16:
          this.$ = yy.handler.helper.logicMatch('<', $$[$0 - 2], $$[$0]);
          break;
        case 17:
          this.$ = yy.handler.helper.mathMatch('-', $$[$0 - 2], $$[$0]);
          break;
        case 18:
          this.$ = yy.handler.helper.mathMatch('*', $$[$0 - 2], $$[$0]);
          break;
        case 19:
          this.$ = yy.handler.helper.mathMatch('/', $$[$0 - 2], $$[$0]);
          break;
        case 20:
          this.$ = yy.handler.helper.mathMatch('^', $$[$0 - 2], $$[$0]);
          break;
        case 21:
          var n1 = yy.handler.helper.numberInverted($$[$0]);
          this.$ = n1;
          if (isNaN(this.$)) {
            this.$ = 0;
          }
          break;
        case 22:
          this.$ = yy.handler.helper.number($$[$0]);
          if (isNaN(this.$)) {
            this.$ = 0;
          }
          break;
        case 23:
          // console.log("message from parser: 'calling function with no args': ", $$[$0 - 2]);
          this.$ = yy.handler.helper.callFunction.call(this, $$[$0 - 2], '');
          break;
        case 24:
          // console.log("message from parser: 'calling function w/ args': ", $$[$0 - 3], $$[$0 - 1]);
          this.$ = yy.handler.helper.callFunction.call(this, $$[$0 - 3], $$[$0 - 1]);
          break;
        case 28:
          this.$ = yy.handler.helper.fixedCellValue.call(yy.obj, $$[$0]);
          break;
        case 29:
          this.$ = yy.handler.helper.fixedCellRangeValue.call(yy.obj, $$[$0 - 2], $$[$0]);
          break;
        case 30:
          this.$ = yy.handler.helper.cellValue.call(yy.obj, $$[$0]);
          break;
        case 31:
          this.$ = yy.handler.helper.cellRangeValue.call(yy.obj, $$[$0 - 2], $$[$0]);
          break;
        case 32:
          if (yy.handler.utils.isArray($$[$0])) {
            this.$ = $$[$0];
          } else {
            this.$ = [$$[$0]];
          }
          break;
        case 33:
          let result = [],
            arr = eval("[" + yytext + "]");
          arr.forEach(function (item) {
            result.push(item);
          });
          this.$ = result;
          break;
        case 34:
        case 35:
          $$[$0 - 2].push($$[$0]);
          this.$ = $$[$0 - 2];
          break;
        case 36:
          this.$ = [$$[$0]];
          break;
        case 37:
          this.$ = (yy.handler.utils.isArray($$[$0 - 2]) ? $$[$0 - 2] : [$$[$0 - 2]]);
          this.$.push($$[$0]);
          break;
        case 38:
          this.$ = $$[$0];
          break;
        case 39:
          this.$ = parseFloat($$[$0 - 2] + '.' + $$[$0]) * 1;
          break;
        case 40:
          this.$ = $$[$0 - 1] * 0.01;
          break;
        case 41:
        case 42:
          this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
          break;
      }
    },
    table: [
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        FORMULA_NAME_RULE_INDEX, 1,
        DATE_RULE_INDEX, 2,
        INDEX6, 3,
        INDEX7, $V0,
        INDEX8, $V1,
        INDEX9, 6,
        INDEX10, $V2,
        INDEX13, $V3,
        INDEX14, $V4,
        INDEX19, $V5,
        INDEX23, $V6,
        INDEX25, 12,
        INDEX26, $V7,
        INDEX28, $V8,
        INDEX32, $V9,
        INDEX34, $Va,
        INDEX36, $Vb
      ]),
      ObjectFromPairs.of([
        INDEX1, [3]
      ]),
      ObjectFromPairs.of([
        TIME_RULE_INDEX, [Actions.SHIFT, 19],
        INTEGER_RULE_INDEX, $Vc,
        OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX, $Vd,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        PERIOD_RULE_INDEX, $Vf,
        COLON_RULE_INDEX, $Vg,
        SEMI_COLON_RULE_INDEX, $Vh,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ]),
      extendRules($Vm, [Actions.REDUCE, 2], ObjectFromPairs.of([INDEX33, [Actions.SHIFT, 30]])),
      extendRules($Vm, [Actions.REDUCE, 3]),
      extendRules($Vm, [Actions.REDUCE, 4]),
      extendRules($Vm, [Actions.REDUCE, 5], ObjectFromPairs.of([INDEX35, [Actions.SHIFT, 31]])),
      extendRules($Vm, [Actions.REDUCE, 6]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 32,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 33,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 34,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        AMPERSAND_SIGN_RULE_INDEX, [Actions.SHIFT, 35]
      ]),
      extendRules($Vm, [Actions.REDUCE, 25]),
      extendRules($Vm, [Actions.REDUCE, 26], ObjectFromPairs.of([Actions.REDUCE, 36, 32, [Actions.SHIFT, 37], 36, $Vb])),
      extendRules($Vn, [Actions.REDUCE, 36], ObjectFromPairs.of([INDEX36, $Vo])),
      extendRules($Vp, [Actions.REDUCE, 38], ObjectFromPairs.of([INDEX33, [Actions.SHIFT, 39]])),
      extendRules($Vm, [Actions.REDUCE, 28], ObjectFromPairs.of([INDEX27, [Actions.SHIFT, 40]])),
      extendRules($Vm, [Actions.REDUCE, 30], ObjectFromPairs.of([INDEX27, [Actions.SHIFT, 41]])),
      ObjectFromPairs.of([INDEX32, [Actions.SHIFT, 42]]),
      ObjectFromPairs.of([INDEX1, [Actions.ACCEPT, 1]]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 43,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 44,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 45,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 48,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX, [1, 46],
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COLON_RULE_INDEX, [1, 47],
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 50,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX, [1, 49],
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 51,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 52,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 53,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 54,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 55,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([ [Actions.SHIFT, 56]]),
      extendRules($Vp, [Actions.REDUCE, 40]),
      ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX, $Vd,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        SINGLE_WHITESPACE_RULE_INDEX, [Actions.SHIFT, 57],
        PERIOD_RULE_INDEX, $Vf,
        COLON_RULE_INDEX, $Vg,
        SEMI_COLON_RULE_INDEX, $Vh,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ]),
      extendRules($Vq, [Actions.REDUCE, 21], ObjectFromPairs.of([
        INDEX11, $Vc,
        INDEX20, $Vj,
        INDEX21, $Vk,
        INDEX22, $Vl
      ])),
      extendRules($Vq, [Actions.REDUCE, 22], ObjectFromPairs.of([
        INDEX11, $Vc,
        INDEX20, $Vj,
        INDEX21, $Vk,
        INDEX22, $Vl])
      ),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 60,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        SINGLE_WHITESPACE_RULE_INDEX, [1, 58],
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        CARET_SIGN_RULE_INDEX, 59,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        NOT_RULE_INDEX, [1, 61],
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      extendRules($Vm, [Actions.REDUCE, 27]),
      ObjectFromPairs.of([INDEX36, $Vo]),
      ObjectFromPairs.of([INDEX32, [Actions.SHIFT, 62]]),
      ObjectFromPairs.of([INDEX34, [Actions.SHIFT, 63]]),
      ObjectFromPairs.of([INDEX26, [Actions.SHIFT, 64]]),
      ObjectFromPairs.of([INDEX28, [Actions.SHIFT, 65]]),
      ObjectFromPairs.of([37, [Actions.SHIFT, 66]]),
      extendRules($Vm, [Actions.REDUCE, 7]),
      extendRules([5, 12, 15, 30, 31], [Actions.REDUCE, 8], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        PERIOD_RULE_INDEX, $Vf,
        COLON_RULE_INDEX, $Vg,
        SEMI_COLON_RULE_INDEX, $Vh,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vq, [Actions.REDUCE, 9], ObjectFromPairs.of([
        INDEX11, $Vc,
        INDEX20, $Vj,
        INDEX21, $Vk,
        INDEX22, $Vl
      ])),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 67,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 68,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      extendRules($Vr, [Actions.REDUCE, 16], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 69,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      extendRules($Vr, [Actions.REDUCE, 15], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules([5, 12, 15, 18, 30, 31], [Actions.REDUCE, 14], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        PERIOD_RULE_INDEX, $Vf,
        COLON_RULE_INDEX, $Vg,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vq, [Actions.REDUCE, 17], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vs, [Actions.REDUCE, 18], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vs, [Actions.REDUCE, 19], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules([5, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31], [Actions.REDUCE, 20], ObjectFromPairs.of([INTEGER_RULE_INDEX, $Vc])),
      extendRules($Vn, [Actions.REDUCE, 37]),
      extendRules($Vm, [Actions.REDUCE, 10]),
      extendRules($Vm, [Actions.REDUCE, 23]),
      ObjectFromPairs.of([
        SINGLE_WHITESPACE_RULE_INDEX, [Actions.SHIFT, 70],
        OPEN_DOUBLE_QUOTE_INDEX, [Actions.SHIFT, 71],
        OPEN_SINGLE_QUITE_INDEX, [Actions.SHIFT, 72]
      ]),
      extendRules($Vt, [Actions.REDUCE, 32], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX, $Vd,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        PERIOD_RULE_INDEX, $Vf,
        COLON_RULE_INDEX, $Vg,
        SEMI_COLON_RULE_INDEX, $Vh,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vt, [Actions.REDUCE, 33]), ObjectFromPairs.of([37, [Actions.SHIFT, 73]]), // index 37?
      extendRules($Vp, [Actions.REDUCE, 39]),
      extendRules($Vm, [Actions.REDUCE, 29]),
      extendRules($Vm, [Actions.REDUCE, 31]),
      extendRules($Vu, [Actions.REDUCE, 41]),
      extendRules($Vr, [Actions.REDUCE, 11], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vr, [Actions.REDUCE, 13], ObjectFromPairs.of([
        11, $Vc,
        13, $Ve,
        19, $Vi,
        20, $Vj,
        21, $Vk,
        22, $Vl
      ])),
      extendRules($Vr, [Actions.REDUCE, 12], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vm, [Actions.REDUCE, 24]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 74,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      ObjectFromPairs.of([
        SINGLE_QUOTES_RULE_INDEX, 13,
        DATE_RULE_INDEX, 75,
        $_A1_CELL_RULE_INDEX, 3,
        A1_CELL_RULE_INDEX, $V0,
        FORMULA_NAME_SIMPLE_RULE_INDEX, $V1,
        VARIABLE_RULE_INDEX, 6,
        SIMPLE_VARIABLE_RILE_INDEX, $V2,
        DOLLAR_SIGN_RULE_INDEX, $V3,
        AMPERSAND_SIGN_RULE_INDEX, $V4,
        COMMA_RULE_INDEX, $V5,
        PLUS_SIGN_RULE_INDEX, $V6,
        OPEN_PAREN_RULE_INDEX, 12,
        CLOSE_PAREN_RULE_INDEX, $V7,
        LESS_THAN_SIGN_RULE_INDEX, $V8,
        EXCLAMATION_POINT_RULE_INDEX, $V9,
        PERCENT_SIGN_RULE_INDEX, $Va,
        END_OF_STRING_RULE_INDEX, $Vb
      ]),
      extendRules($Vu, [Actions.REDUCE, 42]),
      extendRules($Vt, [Actions.REDUCE, 34], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX, $Vd,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        PERIOD_RULE_INDEX, $Vf,
        COLON_RULE_INDEX, $Vg,
        SEMI_COLON_RULE_INDEX, $Vh,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ])),
      extendRules($Vt, [Actions.REDUCE, 35], ObjectFromPairs.of([
        INTEGER_RULE_INDEX, $Vc,
        OPEN_AND_CLOSE_OF_ARRAY_RULE_INDEX, $Vd,
        DOLLAR_SIGN_RULE_INDEX, $Ve,
        PERIOD_RULE_INDEX, $Vf,
        COLON_RULE_INDEX, $Vg,
        SEMI_COLON_RULE_INDEX, $Vh,
        COMMA_RULE_INDEX, $Vi,
        ASTERISK_RULE_INDEX, $Vj,
        FORWARD_SLASH_RULE_INDEX, $Vk,
        MINUS_SIGN_RULE_INDEX, $Vl
      ]))
    ],
    defaultActions: ObjectFromPairs.of([COMMA_RULE_INDEX, [Actions.REDUCE, 1]]),
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        throw new Error(str);
      }
    },
    parse: function parse(input) {
      let self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

      let args = lstack.slice.call(arguments, 1);

      //this.reductionCount = this.shiftCount = 0;

      let lexer = Object.create(this.lexer);
      let sharedState = {
        yy: {
          parseError: undefined,
          lexer: {
            parseError: undefined
          },
          parser: {
            parseError: undefined
          }
        }
      };
      // copy state
      for (let k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      let yyloc = lexer.yylloc;
      lstack.push(yyloc);

      let ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }

      function lex() {
        let token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }
        return token;
      }

      let symbol, preErrorSymbol, state, action, r, yyval = {
        $: undefined,
        _$: undefined
      }, p, len, newState, expected;
      while (true) {
        // retrieve state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          // read action for current state and first input
          action = table[state] && table[state][symbol];
        }

        // console.log("symbol:", symbol, "action:", action);
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
          let error_rule_depth;
          let errStr = '';

          // Return the rule stack depth where the nearest error rule can be found.
          // Return FALSE when no error recovery rule was found.
          this.locateNearestErrorRecoveryRule = function(state) {
            let stack_probe = stack.length - 1;
            let depth = 0;

            // try to recover from error
            for (; ;) {
              // check for error recovery rule in this state
              if ((TERROR.toString()) in table[state]) {
                return depth;
              }
              if (state === 0 || stack_probe < 2) {
                return false; // No suitable error recovery rule available.
              }
              stack_probe -= 2; // popStack(1): [symbol, action]
              state = stack[stack_probe];
              ++depth;
            }
          };

          if (!recovering) {
            // first see if there's any chance at hitting an error recovery rule:
            error_rule_depth = this.locateNearestErrorRecoveryRule(state);

            // Report error
            expected = [];
            for (p in table[state]) {
              if (this.terminals_[p] && p > TERROR) {
                expected.push("'" + this.terminals_[p] + "'");
              }
            }
            if (lexer.showPosition) {
              errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
            } else {
              errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                (symbol == EOF ? "end of input" :
                  ("'" + (this.terminals_[symbol] || symbol) + "'"));
            }
            this.parseError(errStr, {
              text: lexer.match,
              token: this.terminals_[symbol] || symbol,
              line: lexer.yylineno,
              loc: yyloc,
              expected: expected,
              recoverable: (error_rule_depth !== false)
            });
          } else if (preErrorSymbol !== EOF) {
            error_rule_depth = this.locateNearestErrorRecoveryRule(state);
          }

          // just recovered from another error
          if (recovering == 3) {
            if (symbol === EOF || preErrorSymbol === EOF) {
              throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
            }

            // discard current lookahead and grab another
            yyleng = lexer.yyleng;
            yytext = lexer.yytext;
            yylineno = lexer.yylineno;
            yyloc = lexer.yylloc;
            symbol = lex();
          }

          // try to recover from error
          if (error_rule_depth === false) {
            throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
          }
          popStack(error_rule_depth);

          preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
          symbol = TERROR;         // insert generic error symbol as new lookahead
          state = stack[stack.length - 1];
          action = table[state] && table[state][TERROR];
          recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        // Actions are always:
        //   Shift: continue to process tokens.
        //   Reduce: enough tokens have been gathered for use to reduce input through evaluation.
        //   Accept: return.
        switch (action[0]) {
          case Actions.SHIFT: // Shift
            //this.shiftCount++;

            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]); // push state
            symbol = null;
            if (!preErrorSymbol) { // normal execution/no error
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              // error just occurred, resume old lookahead f/ before error
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;

          case Actions.REDUCE:
            // Reduce
            //this.reductionCount++;

            len = this.productions_[action[1]][1];

            // perform semantic action
            yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
            // default location, uses first token for firsts, last for lasts
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

            if (typeof r !== 'undefined') {
              return r;
            }

            // pop off stack
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }

            stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            // goto new state = table[STATE][NONTERMINAL]
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;

          case Actions.ACCEPT:
            // Accept
            return true;
        }

      }
    }
  };

  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = ({

      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
          (lines.length === oldLines.length ? this.yylloc.first_column : 0)
          + oldLines[oldLines.length - lines.length].length - lines[0].length :
          this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });

        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token,
          lines,
          backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ?
          lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
          this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token,
          match,
          tempMatch,
          index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule mis-match.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0:/* skip whitespace */
            break;
          case 1:
            return 10;
          case 2:
            return 10;
          case 3:
            return 23;
          case 4:
            return 7;
          case 5:
            return 8;
          case 6:
            //if (yy.obj.type == 'cell') return 26;
            //return 32;
            return 26;
          case 7:
            //if (yy.obj.type == 'cell') return 28;
            //return 32;
            return 28;
          case 8:
            return 23;
          case 9:
            return 32;
          case 10:
            return 32;
          case 11:
            return 34;
          case 12:
            return 29;
          case 13:/* skip whitespace */
            break;
          case 14:
            return 11;
          case 15:
            return ' ';
          case 16:
            return 33;
          case 17:
            return 27;
          case 18:
            return 30;
          case 19:
            return 31;
          case 20:
            return 20;
          case 21:
            return 21;
          case 22:
            return 19;
          case 23:
            return 13;
          case 24:
            return 22;
          case 25:
            return 14;
          case 26:
            return 15;
          case 27:
            return 17;
          case 28:
            return 16;
          case 29:
            return 18;
          case 30:
            return '"';
          case 31:
            return "'";
          case 32:
            return "!";
          case 33:
            return 12;
          case 34:
            return 35;
          case 35:
            return 36;
          case 36:
            return 5;
        }
      },
      rules: RULES,
      conditions: {
        "INITIAL": {
          "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],
          "inclusive": true
        }
      }
    });
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }

  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser;
})();

export {
  Parser
}